{"version":3,"sources":["webpack:///./src/styles/helpers/_reset.scss","webpack:///./src/styles/elements/_type.scss","webpack:///./src/styles/helpers/_library.scss","webpack:///./src/styles/elements/_grid.scss","webpack:///./src/styles/plugins/neat/neat/mixins/_grid-container.scss","webpack:///./src/styles/plugins/neat/neat/mixins/_grid-collapse.scss","webpack:///./src/styles/helpers/_clearfix.scss","webpack:///./src/styles/plugins/neat/neat/mixins/_grid-column.scss","webpack:///./src/styles/plugins/neat/neat/functions/_neat-float-direction.scss","webpack:///./src/styles/plugins/neat/neat/mixins/_grid-media.scss","webpack:///./src/styles/plugins/neat/neat/mixins/_grid-push.scss","webpack:///./src/styles/plugins/neat/neat/mixins/_grid-shift.scss","webpack:///./src/styles/elements/_images.scss","webpack:///./src/styles/helpers/_bem.scss","webpack:///./src/styles/views/snippets/_header-desktop.scss","webpack:///./src/styles/views/snippets/_header-mobile.scss","webpack:///./src/styles/elements/_colours.scss"],"names":[],"mappings":"AAAA,KACI,SACA,eAAgB,CAapB,oBAJI,SACA,SAAU,CAQd,GACI,aAAe,CAGnB,EACI,cACA,oBAAqB,CCoBzB,ECgFQ,eAEI,eDlHS,CCoGT,oCDpEZ,ECqFQ,cDpHQ,CAiCf,CCkEW,oCDpEZ,ECqFQ,cDnHQ,CAgCf,CAED,GC4EQ,eAEI,eDtGS,CCwFT,oCDhEZ,GCiFQ,cDxGQ,CAyBf,CC8DW,oCDhEZ,GCiFQ,cDvGQ,CAwBf,CAED,GCwEQ,eAEI,gBD5GU,CC8FV,oCD5DZ,GC6EQ,cD9GQ,CAmCf,CC0DW,oCD5DZ,GC6EQ,cD7GQ,CAkCf,CAED,GCoEQ,eAEI,eDlHS,CCoGT,oCDxDZ,GCyEQ,cDpHQ,CA6Cf,CCsDW,oCDxDZ,GCyEQ,cDnHQ,CA4Cf,CAED,GCgEQ,eAEI,eDlHS,CCoGT,oCDpDZ,GCqEQ,cDpHQ,CAiDf,CCkDW,oCDpDZ,GCqEQ,cDnHQ,CAgDf,CAED,GC4DQ,eAEI,eDlHS,CCoGT,oCDhDZ,GCiEQ,cDpHQ,CAqDf,CC8CW,oCDhDZ,GCiEQ,cDnHQ,CAoDf,CETD,WAEI,kBACA,iBACA,aAAc,CCvCd,iBACI,WACA,WACA,aAAc,CACjB,eCID,kBACA,mBACA,uBAA0C,CCf1C,WACI,WACA,WACA,aAAc,CACjB,UCYD,wBACA,WCpB2B,gBLdf,CM0DZ,yCNiBA,UI1CA,kCACA,WCpB2B,gBLDf,CAmEX,WI/CD,wBACA,WCpB2B,gBLdf,CM0DZ,yCNiBA,UI1CA,mCACA,WCpB2B,gBLDf,CAmEX,WI/CD,wBACA,WCpB2B,gBLdf,CM0DZ,yCNiBA,UI1CA,yBACA,WCpB2B,gBLDf,CAmEX,WI/CD,wBACA,WCpB2B,gBLdf,CM0DZ,yCNiBA,UI1CA,mCACA,WCpB2B,gBLDf,CAmEX,WI/CD,wBACA,WCpB2B,gBLdf,CM0DZ,yCNiBA,UI1CA,mCACA,WCpB2B,gBLDf,CAmEX,WI/CD,wBACA,WCpB2B,gBLdf,CM0DZ,yCNiBA,UI1CA,uBACA,WCpB2B,gBLDf,CAmEX,WI/CD,wBACA,WCpB2B,gBLdf,CM0DZ,yCNiBA,UI1CA,mCACA,WCpB2B,gBLDf,CAmEX,WI/CD,wBACA,WCpB2B,gBLdf,CM0DZ,yCNiBA,UI1CA,mCACA,WCpB2B,gBLDf,CAmEX,WI/CD,wBACA,WCpB2B,gBLdf,CM0DZ,yCNiBA,UI1CA,yBACA,WCpB2B,gBLDf,CAmEX,YI/CD,wBACA,WCpB2B,gBLdf,CM0DZ,yCNiBA,WI1CA,mCACA,WCpB2B,gBLDf,CAmEX,YI/CD,wBACA,WCpB2B,gBLdf,CM0DZ,yCNiBA,WI1CA,mCACA,WCpB2B,gBLDf,CAmEX,YI/CD,wBACA,WCpB2B,gBLdf,CM0DZ,yCNiBA,WI1CA,wBACA,WCpB2B,gBLDf,CAmEX,CMtBD,yCN2BA,QOtDI,8CADC,CP2DJ,CM/BD,yCN2BA,QOtDI,+CADC,CP2DJ,CM/BD,yCN2BA,QOtDI,qCADC,CP2DJ,CM/BD,yCN2BA,QOtDI,+CADC,CP2DJ,CM/BD,yCN2BA,QOtDI,+CADC,CP2DJ,CM/BD,yCN2BA,QOtDI,mCADC,CP2DJ,CM/BD,yCN2BA,QOtDI,+CADC,CP2DJ,CM/BD,yCN2BA,QOtDI,+CADC,CP2DJ,CM/BD,yCN2BA,QOtDI,qCADC,CP2DJ,CM/BD,yCN2BA,SOtDI,+CADC,CP2DJ,CM/BD,yCN2BA,SOtDI,8CADC,CP2DJ,CM/BD,yCN2BA,SOtDI,oCADC,CP2DJ,CM/BD,yCNoCA,SO/DI,8CADC,CPoEJ,CMxCD,yCNoCA,SO/DI,+CADC,CPoEJ,CMxCD,yCNoCA,SO/DI,qCADC,CPoEJ,CMxCD,yCNoCA,SO/DI,+CADC,CPoEJ,CMxCD,yCNoCA,SO/DI,+CADC,CPoEJ,CMxCD,yCNoCA,SO/DI,mCADC,CPoEJ,CMxCD,yCNoCA,SO/DI,+CADC,CPoEJ,CMxCD,yCNoCA,SO/DI,+CADC,CPoEJ,CMxCD,yCNoCA,SO/DI,qCADC,CPoEJ,CMxCD,yCNoCA,UO/DI,+CADC,CPoEJ,CMxCD,yCNoCA,UO/DI,+CADC,CPoEJ,CMxCD,yCNoCA,UO/DI,oCADC,CPoEJ,CMxCD,yCN6CA,eQvEI,wCAKJ,iBAAkB,CRsEjB,CMjDD,yCN6CA,eQvEI,yCAKJ,iBAAkB,CRsEjB,CMjDD,yCN6CA,eQvEI,+BAKJ,iBAAkB,CRsEjB,CMjDD,yCN6CA,eQvEI,yCAKJ,iBAAkB,CRsEjB,CMjDD,yCN6CA,eQvEI,yCAKJ,iBAAkB,CRsEjB,CMjDD,yCN6CA,eQvEI,6BAKJ,iBAAkB,CRsEjB,CMjDD,yCN6CA,eQvEI,yCAKJ,iBAAkB,CRsEjB,CMjDD,yCN6CA,eQvEI,yCAKJ,iBAAkB,CRsEjB,CMjDD,yCN6CA,eQvEI,+BAKJ,iBAAkB,CRsEjB,CMjDD,yCN6CA,gBQvEI,yCAKJ,iBAAkB,CRsEjB,CMjDD,yCN6CA,gBQvEI,yCAKJ,iBAAkB,CRsEjB,CMjDD,yCN6CA,gBQvEI,8BAKJ,iBAAkB,CRsEjB,CMjDD,yCNsDA,cQhFI,wCAKJ,iBAAkB,CR+EjB,CM1DD,yCNsDA,cQhFI,yCAKJ,iBAAkB,CR+EjB,CM1DD,yCNsDA,cQhFI,+BAKJ,iBAAkB,CR+EjB,CM1DD,yCNsDA,cQhFI,yCAKJ,iBAAkB,CR+EjB,CM1DD,yCNsDA,cQhFI,yCAKJ,iBAAkB,CR+EjB,CM1DD,yCNsDA,cQhFI,6BAKJ,iBAAkB,CR+EjB,CM1DD,yCNsDA,cQhFI,yCAKJ,iBAAkB,CR+EjB,CM1DD,yCNsDA,cQhFI,yCAKJ,iBAAkB,CR+EjB,CM1DD,yCNsDA,cQhFI,+BAKJ,iBAAkB,CR+EjB,CM1DD,yCNsDA,eQhFI,yCAKJ,iBAAkB,CR+EjB,CM1DD,yCNsDA,eQhFI,wCAKJ,iBAAkB,CR+EjB,CM1DD,yCNsDA,eQhFI,8BAKJ,iBAAkB,CR+EjB,CS9GL,mCACI,UACA,+BAAyB,uBAG7B,SACI,0BACA,kBACA,sCAAwC,CAG5C,oBACI,uBACA,cAAe,CAGnB,IACI,UAAW,CCiBX,gBCzCA,iBACA,iBACA,kBACA,YAAa,CDwCZ,sBTnBG,WACA,WACA,aAAc,CKiClB,yCIlBA,gBCnCI,aAAc,CDqCjB,eCjCD,oBAAa,iCACb,yBAAmB,yCACnB,WAAW,wBPuBX,WCpB2B,gBLdf,CU6DA,oBC/CR,qBACA,gBAAiB,CDgDR,iCC9CL,cAAiB,CACpB,eCnBL,oBAAa,iCACb,WACA,yBAAmB,yCACnB,iBACA,iBACA,iBAAkB,CFsCjB,yCAFD,eElCI,YAAa,CFoChB,cE/BD,aACA,YACA,aACA,eACA,OACA,MACA,gBClBc,WDoBd,iBAAkB,CFuBjB,yCAFD,aEnBI,YAAa,CFqBhB,CEnBD,sCACI,oBAAa,iCACb,wBAAuB,4CACvB,yBAAmB,yCACtB,gBAEG,oBAAqB,CACxB,WAMD,kBACA,SACA,WACA,WACA,aAAc,CFEb,yCAFD,WEEI,YAAa,CFAhB,mBEGG,kBACA,qBACA,UACA,YACA,WACA,gBACA,YACA,eACA,SAAU,CAiCb,uBA/BO,kBACA,cACA,WACA,WACA,gBC3DM,0FD6DmB,mQAwB5B,mCAtBO,KAAM,CACT,oCAEG,OAAQ,CACX,oCAEG,QAAS,CACZ,gDAEG,QACA,0FAC8B,uQAUjC,4DARO,gCAAwB,wBAC3B,6DAEG,SAAU,CACb,6DAEG,iCAAyB","file":"assets/bundle.css","sourcesContent":["body {\n    margin: 0px;\n    min-height: 100%;\n}\n\np,\nh1,\nh2,\nh3,\nh4,\nh5 {\n    margin: 0;\n    padding: 0;\n}\n\nul {\n    margin: 0;\n    padding: 0;\n}\n\nli {\n    margin: 0.5em 0;\n}\n\na {\n    color: inherit;\n    text-decoration: none;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/helpers/_reset.scss","/**\n *  Typography\n */\n\n// @font-face {\n// \tfont-family: 'FontName';\n// \tsrc: url('../fonts/fontname.woff') format('woff');\n// \tfont-weight: normal;\n// \tfont-style: normal;\n// }\n\n/* Map options: null, x-small, small, medium, large, x-large */\n\n$base-font-sizes: (\n    null : (20px, 1.3),\n    small : 19px,\n    medium: 22px\n);\n\n$medium-font-sizes: (\n    null : (27px, 1.22),\n    small : 26px,\n    medium: 30px\n);\n\n$large-font-sizes: (\n    null : (18px, 1.4),\n    small : 17px,\n    medium: 20px\n);\n\n$xlarge-font-sizes: (\n    null : (18px, 1.4),\n    small : 17px,\n    medium: 20px\n);\n\np,\nh1,\nh2,\nh3,\nh4,\nh5 {\n    // font-family: FontName;\n}\n\np {\n    @include font-size($base-font-sizes);\n}\n\nh1 {\n    @include font-size($large-font-sizes);\n}\n\nh2 {\n    @include font-size($medium-font-sizes);\n}\n\nh3 {\n    @include font-size($base-font-sizes);\n}\n\nh4 {\n    @include font-size($base-font-sizes);\n}\n\nh5 {\n    @include font-size($base-font-sizes);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/elements/_type.scss","/**\n *  Library\n *\n *  Contains mixins and functions.\n */\n\n/**\n *  Layout\n */\n\n// Margins and positioning helper function\n@function spacer($val: 1) {\n    @return $spacer * $val + 0px;\n}\n\n/**\n *  Settings\n */\n\n// Master config function\n@function config($map, $key) {\n    @return map-get($map, $key);\n}\n\n// A simple function to retrieve a color from the array; adapted from http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/\n@function color($request) {\n    @return config($_color, $request);\n}\n\n// Same thing for theme metadata\n@function metadata($request) {\n    @return config($_metadata, $request);\n}\n\n//Custom Mixins\n\n@mixin transition($type, $time) {\n    -webkit-transition: $type $time ease-in-out;\n    -moz-transition: $type $time ease-in-out;\n    -o-transition: $type $time ease-in-out;\n    transition: $type $time ease-in-out;\n}\n\n/**\n *  Center element\n *  NB: parent element must have position: relative;\n *\n *  @variables: xy, x, y\n *  Default: xy\n */\n\n@mixin center($xy:xy) {\n    position: absolute;\n    @if $xy == xy {\n        left: 50%;\n        top: 50%;\n        bottom: auto;\n        right: auto;\n        transform: translate(-50%, -50%);\n    } @else if $xy == x {\n        left: 50%;\n        right: auto;\n        transform: translateX(-50%);\n    } @else if $xy == y {\n        top: 50%;\n        bottom: auto;\n        transform: translateY(-50%);\n    }\n}\n\n/**\n *  Border Radius\n *\n *  @variables: $radius (px, em, rem value)\n */\n\n@mixin border-radius($radius:0.25em) {\n    border-radius: $radius;\n}\n\n/**\n *  Font Smoothing\n */\n\n@mixin font-smoothing {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n/**\n *  Font size map by Jonathan Suh\n *  https://www.smashingmagazine.com/2015/06/responsive-typography-with-sass-maps/\n */\n\n//Set Breakpoints\n$breakpoints: (\n    x-small: $screen-xs,\n    small: $screen-sm,\n    medium: $screen-md,\n    large: $screen-lg,\n    x-large: $screen-xlg\n);\n\n//Set Font sizes\n@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {\n    @each $fs-breakpoint, $fs-font-size in $fs-map {\n        @if $fs-breakpoint == null {\n            @include make-font-size($fs-font-size);\n        } @else {\n            // If $fs-font-size is a key that exists in\n            // $fs-breakpoints, use the value\n            @if map-has-key($fs-breakpoints, $fs-breakpoint) {\n                $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);\n            }\n            @media screen and (min-width: $fs-breakpoint) {\n                @include make-font-size($fs-font-size);\n            }\n        }\n    }\n}\n\n// Utility function for mixin font-size\n@mixin make-font-size($fs-font-size) {\n    // If $fs-font-size is a list, include\n    // both font-size and line-height\n    @if type-of($fs-font-size) == \"list\" {\n        font-size: nth($fs-font-size, 1);\n        @if (length($fs-font-size) > 1) {\n            line-height: nth($fs-font-size, 2);\n        }\n    } @else {\n        font-size: $fs-font-size;\n    }\n}\n\n//Set Spacing sizes\n@mixin spacing($attribute, $s-map, $s-breakpoints: $breakpoints) {\n    @each $s-breakpoint, $s-spacing-size in $s-map {\n        @if $s-breakpoint == null {\n            @include make-spacing($s-spacing-size, $attribute);\n        } @else {\n            // If $s-font-size is a key that exists in\n            // $s-breakpoints, use the value\n            @if map-has-key($s-breakpoints, $s-breakpoint) {\n                $s-breakpoint: map-get($s-breakpoints, $s-breakpoint);\n            }\n            @media screen and (min-width: $s-breakpoint) {\n                @include make-spacing($s-spacing-size, $attribute);\n            }\n        }\n    }\n}\n\n// Utility function for mixin spacing\n@mixin make-spacing($s-spacing-size, $attribute) {\n    // If conditions for selecting attribute\n    #{$attribute}: $s-spacing-size;\n}\n\n/**\n *  Media Query Mixins.\n *  Sorted by Minimum, Maximum and Between\n */\n\n/**\n *  Minimums\n * eg.\n * @include minimum(tablet){ @content };\n * css will be active on tablet size and beyond\n *\n * @variables: tablet, small-desktop, desktop\n */\n\n@mixin minimum($canvas) {\n    @if $canvas == tablet {\n        @media (min-width: #{$screen-xs}) {\n            @content;\n        }\n    } @else if $canvas == tablet {\n        @media (min-width: #{$screen-sm}) {\n            @content;\n        }\n    } @else if $canvas == small-desktop {\n        @media (min-width: #{$screen-sm}) {\n            @content;\n        }\n    } @else if $canvas == med-desktop {\n        @media (min-width: #{$screen-md}) {\n            @content;\n        }\n    } @else if $canvas == lge-desktop {\n        @media (min-width: #{$screen-lg}) {\n            @content;\n        }\n    } @else if $canvas == desktop {\n        @media (min-width: #{$screen-desktop}) {\n            @content;\n        }\n    }\n}\n\n/**\n *  Maximums\n * eg.\n * @include maximum(tablet){ @content };\n * css will be active on tablet size size and beyond\n *\n * @variables: mobile, tablet, small-desktop, desktop\n */\n\n@mixin maximum($canvas) {\n    @if $canvas == mobile {\n        @media (max-width: #{$screen-xs-max}) {\n            @content;\n        }\n    } @else if $canvas == tablet {\n        @media (max-width: #{$screen-sm-max}) {\n            @content;\n        }\n    } @else if $canvas == small-desktop {\n        @media (max-width: #{$screen-sm-max}) {\n            @content;\n        }\n    } @else if $canvas == med-desktop {\n        @media (max-width: #{$screen-md-max}) {\n            @content;\n        }\n    } @else if $canvas == lge-desktop {\n        @media (max-width: #{$screen-lg-max}) {\n            @content;\n        }\n    } @else if $canvas == desktop {\n        @media (max-width: #{$screen-md-max}) {\n            @content;\n        }\n    }\n}\n\n/**\n *  Betweens\n * eg.\n * @include between(tablet,desktop){ @content };\n * css will be active between tablet and desktop breakpoints.\n *\n * @variables: tablet, desktop\n */\n\n@mixin between($canvas-start, $canvas-end) {\n    //Tablet Start\n    @if $canvas-start == tablet && $canvas-end == desktop {\n        @media (min-width: #{$screen-xs}) and (max-width: #{$screen-desktop - 1px}) {\n            @content;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/helpers/_library.scss","$neat-grid: (\n    columns: 12,\n    gutter: 10px,\n    direction: ltr\n);\n\n$tablet: (\n    columns: 12,\n    gutter: 10px,\n    media: $screen-xs,\n    direction: ltr\n);\n\n$smdesktop: (\n    columns: 12,\n    gutter: 10px,\n    media: $screen-sm,\n    direction: ltr\n);\n\n$mddesktop: (\n    columns: 12,\n    gutter: 10px,\n    media: $screen-md,\n    direction: ltr\n);\n\n$lgdesktop: (\n    columns: 12,\n    gutter: 10px,\n    media: $screen-lg,\n    direction: ltr\n);\n\n$xldesktop: (\n    columns: 12,\n    gutter: 10px,\n    media: $screen-xlg,\n    direction: ltr\n);\n\n//Here for reference\n\n// $screen-xs:                  480px !default;\n\n// // Small screen / tablet\n// $screen-sm:                  768px !default;\n\n// // Medium screen / desktop\n// $screen-md:                  992px !default;\n\n// // Large screen / wide desktop\n// $screen-lg:                  1230px !default;\n\n// // Extra Large screen / wide desktop\n// $screen-xlg:                  1700px !default;\n\n$site-max-width: 1600px;\n\n.container {\n    @include grid-container;\n    position: relative;\n    max-width: $site-max-width;\n    margin: 0 auto;\n}\n\n.grid-collapse {\n    @include grid-collapse();\n}\n\n//Row\n.row {\n    @include clearfix;\n}\n\n//Columns\n@for $i from 1 through 12 {\n    .column-#{$i} {\n        @include grid-column(12);\n        @include grid-media($smdesktop) {\n            @include grid-column($i);\n        }\n    }\n}\n\n//Push Columns Left\n@for $i from 1 through 12 {\n    .left-#{$i} {\n        @include grid-media($smdesktop) {\n            @include grid-push(-$i);\n        }\n    }\n}\n\n//Push Columns Right\n@for $i from 1 through 12 {\n    .right-#{$i} {\n        @include grid-media($smdesktop) {\n            @include grid-push($i);\n        }\n    }\n}\n\n//Shift Columns Right\n@for $i from 1 through 12 {\n    .shift-right-#{$i} {\n        @include grid-media($smdesktop) {\n            @include grid-shift($i);\n        }\n    }\n}\n\n//Shift Columns Left\n@for $i from 1 through 12 {\n    .shift-left-#{$i} {\n        @include grid-media($smdesktop) {\n            @include grid-shift(-$i);\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/elements/_grid.scss","@charset \"UTF-8\";\n/// Creates a grid container with clearfix.\n///\n/// @group features\n///\n/// @name Grid container\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to generate the container.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-container;\n///   }\n///\n/// @example css\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: block;\n///   }\n\n@mixin grid-container($grid: $neat-grid) {\n    &::after {\n        clear: both;\n        content: \"\";\n        display: block;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/plugins/neat/neat/mixins/_grid-container.scss","@charset \"UTF-8\";\n/// Creates collapsed grid object that consumes the gutters of its container,\n/// for use in nested layouts.\n///\n/// @group features\n///\n/// @name Grid collapse\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to generate the collapsed container.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-collapse;\n///   }\n///\n/// @example css\n///   .element {\n///     float: left;\n///     margin-left: -20px;\n///     margin-right: -20px;\n///     width: calc(100% + 40px);\n///   }\n\n@mixin grid-collapse($grid: $neat-grid) {\n    $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n    @if unit($_grid-gutter) == \"%\" {\n        @warn \"`grid-collapse` is not compatible with percentage based gutters.\";\n    }\n\n    margin-#{_neat-float-direction($grid)}: -($_grid-gutter);\n    margin-#{_neat-opposite-direction($grid)}: -($_grid-gutter);\n    width: calc(100% + #{($_grid-gutter * 2)});\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/plugins/neat/neat/mixins/_grid-collapse.scss","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n    &::after {\n        clear: both;\n        content: \"\";\n        display: table;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/helpers/_clearfix.scss","@charset \"UTF-8\";\n/// Creates a grid column of requested size.\n///\n/// @group features\n///\n/// @name Grid column\n///\n/// @argument {number (unitless)} $columns [null]\n///   Specifies the number of columns an element should span based on the total\n///   columns of the grid.\n///\n///   This can also be defined in a shorthand syntaxt which also contains the\n///   total column count such as `3 of 5`.\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to generate the column.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-column(3);\n///   }\n///\n/// @example css\n///   .element {\n///     width: calc(25% - 25px);\n///     float: left;\n///     margin-left: 20px;\n///   }\n\n@mixin grid-column($columns: null, $grid: $neat-grid) {\n    $columns: _neat-column-default($grid, $columns);\n    $_grid-columns: _retrieve-neat-setting($grid, columns);\n    $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n    width: calc(#{_neat-column-width($grid, $columns)});\n    float: _neat-float-direction($grid);\n    margin-#{_neat-float-direction($grid)}: $_grid-gutter;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/plugins/neat/neat/mixins/_grid-column.scss","@charset \"UTF-8\";\n/// Return the float direction of the grid.\n///\n/// @argument {map} $grid\n///\n/// @return {string}\n///\n/// @example scss\n///   _neat-float-direction($neat-grid)\n///\n/// @access private\n\n@function _neat-float-direction($grid) {\n    $_direction: _retrieve-neat-setting($grid, direction);\n    $_float-direction: null;\n    @if $_direction == \"ltr\" {\n        $_float-direction: left;\n    } @else if $_direction == \"rtl\" {\n        $_float-direction: right;\n    }\n    @return $_float-direction;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/plugins/neat/neat/functions/_neat-float-direction.scss","@charset \"UTF-8\";\n/// `grid-media` allows you to change your layout based on a media query.\n/// For example, an object can span 3 columns on small screens and 6 columns\n/// on large screens.\n///\n/// You can take this a step further and set different grid attributes like\n/// gutter size and total column count for each media query. So, for example,\n/// you can have a `1rem` gutter on small screens, and a `2rem` gutter on large\n/// screens.\n///\n/// @group features\n///\n/// @name Grid media\n///\n/// @argument {map} $grid\n///   The grid to be used within the scope of the block.\n///   This grid should include the `media` property to determine the expression\n///   for the media query.\n///\n/// @content\n///   Grid media will temporarily the override the default grid with the\n///   attributes of the custom grid. This change is scoped to within the mixin\n///   block, and once the mixin has ended the default grid will revert to its\n///   original state as defined by `$neat-grid`. This allows for different\n///   gutter width and column count based on screen size or other properties.\n///\n/// @example scss\n///   $custom-neat-grid: (\n///     columns: 12,\n///     gutter: 50px,\n///     media: 1000px,\n///   );\n///\n///   .element {\n///     @include grid-column(3);\n///\n///     @include grid-media($custom-neat-grid){\n///       @include grid-column(6);\n///     }\n///   }\n///\n/// @example css\n///   .element {\n///     width: calc(25% - 25px);\n///     float: left;\n///     margin-left: 20px;\n///   }\n///\n///   @media only screen and (min-width: 1000px) {\n///     .element {\n///       width: calc(50% - 75px);\n///       float: left;\n///       margin-left: 50px;\n///     }\n///   }\n\n@mixin grid-media($grid) {\n    $_media: _retrieve-neat-setting($grid, media);\n    $_query: _neat-parse-media($_media);\n\n    @media #{$_query} {\n        $_default-neat-grid: $neat-grid;\n        $neat-grid: map-merge($neat-grid, $grid) !global;\n        @content;\n        $neat-grid: $_default-neat-grid !global;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/plugins/neat/neat/mixins/_grid-media.scss","@charset \"UTF-8\";\n/// Push or pull a grid column by manipulating its left margin.\n///\n/// @group features\n///\n/// @name Grid push\n///\n/// @argument {number (unitless)} $push [false]\n///   The number of columns to push the column.\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to detirmine how far to push the column.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-push(3);\n///   }\n///\n/// @example css\n///   .element {\n///     margin-left: calc(25% - 25px + 40px);\n///   }\n\n@mixin grid-push($push: false, $grid: $neat-grid) {\n    $_grid-columns: _retrieve-neat-setting($grid, columns);\n    $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n    @if $push {\n        $_gutter-affordance: $_grid-gutter * 2;\n        $_margin-value: calc(\n            #{_neat-column-width($grid, $push)} + #{$_gutter-affordance}\n        );\n        margin-#{_neat-float-direction($grid)}: $_margin-value;\n    } @else {\n        $_margin-value: _retrieve-neat-setting($grid, gutter);\n        margin-#{_neat-float-direction($grid)}: $_margin-value;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/plugins/neat/neat/mixins/_grid-push.scss","@charset \"UTF-8\";\n/// Shift columns and reorder them within their container using relative\n/// positioning.\n///\n/// @group features\n///\n/// @name Grid shift\n///\n/// @argument {number (unitless)} $shift [false]\n///   The number of columns to shift the column.\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to detirmine how far to shift the column.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-shift(3);\n///   }\n///\n/// @example css\n///   .element {\n///     left: calc(25% - 25px + 20px);\n///     position: relative;\n///   }\n\n@mixin grid-shift($shift: false, $grid: $neat-grid) {\n    @if $shift {\n        $_shift-value: calc(\n            #{_neat-column-width($grid, $shift)} + #{_retrieve-neat-setting(\n                    $grid,\n                    gutter\n                )}\n        );\n        #{_neat-float-direction($grid)}: $_shift-value;\n    } @else {\n        #{_neat-float-direction($grid)}: auto;\n    }\n\n    position: relative;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/plugins/neat/neat/mixins/_grid-shift.scss","// For lazy sizes\n\n/* fade image in after load */\n.lazyload,\n.lazyloading {\n    opacity: 1;\n    transition: opacity 300ms;\n}\n.lazyloaded {\n    opacity: 1;\n    transition: opacity 300ms;\n}\n\n.blur-up {\n    -webkit-filter: blur(20px);\n    filter: blur(20px);\n    transition: filter 1s, -webkit-filter 1s;\n}\n\n.blur-up.lazyloaded {\n    -webkit-filter: blur(0);\n    filter: blur(0);\n}\n\nimg {\n    width: 100%;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/elements/_images.scss","////\n/// BEM Mixins\n/// @group tools\n/// @since v1.0.0\n////\n\n$bem-element-separator: \"__\";\n$bem-modifier-separator: \"--\";\n$bem-pseudo-separator: \":\";\n\n@function _bem-selector-to-string($selector) {\n    $selector: inspect($selector);\n    $dot-index: str-index($selector, \".\") + 1;\n    $selector: str-slice($selector, $dot-index, -1);\n\n    @return $selector;\n}\n\n@function _bem-selector-has-modifier($selector) {\n    $selector: _bem-selector-to-string($selector);\n\n    @if str-index($selector, $bem-modifier-separator) or str-index($selector, \":\") {\n        @return true;\n    } @else {\n        @return false;\n    }\n}\n\n@function _bem-get-block-name($selector) {\n    $selector: _bem-selector-to-string($selector);\n    $modifier-separator: $bem-pseudo-separator;\n\n    @if str-index($selector, $bem-modifier-separator) {\n        $modifier-separator: $bem-modifier-separator;\n    }\n\n    $modifier-start: str-index($selector, $modifier-separator) - 1;\n\n    @return str-slice($selector, 0, $modifier-start);\n}\n\n@mixin b($block) {\n    .#{$block} {\n        @content;\n    }\n}\n\n@mixin e($elements) {\n    $selector: &;\n\n    @if _bem-selector-has-modifier($selector) {\n        $block: _bem-get-block-name($selector);\n\n        @at-root {\n            @each $element in $elements {\n                #{selector-parse(selector-nest(&, '.#{selector-append($block, $bem-element-separator, $element)}'))} {\n                    @content;\n                }\n            }\n        }\n    } @else {\n        @at-root {\n            @each $element in $elements {\n                #{selector-append(&, $bem-element-separator, $element)} {\n                    @content;\n                }\n            }\n        }\n    }\n}\n\n@mixin m($modifier) {\n    $class-name: selector-append(&, $bem-modifier-separator, $modifier);\n\n    @if str-index($modifier, $bem-pseudo-separator) == 1 {\n        $class-name: selector-append(&, $modifier);\n    }\n\n    @at-root #{$class-name} {\n        @content;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/helpers/_bem.scss","@include b(\"header-desktop\") {\n    max-width: $site-max-width;\n    margin-left: auto;\n    margin-right: auto;\n    display: none;\n    @include grid-container();\n    @include grid-media($smdesktop) {\n        display: block;\n    }\n}\n@include b(\"menu-desktop\") {\n    display: flex;\n    align-items: center;\n    height: 3em;\n    @include grid-column(12);\n    @include e(\"item\") {\n        list-style-type: none;\n        margin-right: 2em;\n        &:last-of-type {\n            margin-right: 0px;\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/views/snippets/_header-desktop.scss","@include b(\"header-mobile\") {\n    display: flex;\n    height: 2em;\n    align-items: center;\n    max-width: $site-max-width;\n    margin-left: auto;\n    margin-right: auto;\n    @include grid-media($smdesktop) {\n        display: none;\n    }\n}\n\n@include b(\"menu-mobile\") {\n    display: none;\n    width: 100vw;\n    height: 100vh;\n    position: fixed;\n    left: 0px;\n    top: 0px;\n    background: color(white);\n    z-index: 10;\n    text-align: center;\n    @include grid-media($smdesktop) {\n        display: none;\n    }\n    body.js-mobile-menu-open & {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    li {\n        list-style-type: none;\n    }\n}\n\n$toggle-size: 25px;\n\n@include b(\"hamburger\") {\n    position: absolute;\n    top: #{map-get($neat-grid, gutter)};\n    right: #{map-get($neat-grid, gutter)};\n    z-index: 20;\n    display: block;\n    @include grid-media($smdesktop) {\n        display: none;\n    }\n    button {\n        position: relative;\n        display: inline-block;\n        padding: 0;\n        height: $toggle-size;\n        width: $toggle-size;\n        background: none;\n        border: none;\n        cursor: pointer;\n        outline: 0;\n        span {\n            position: absolute;\n            display: block;\n            height: 2px;\n            width: 100%;\n            background: color(black);\n            transition: top 0.2s 0.2s linear, opacity 0.1s 0.2s linear,\n                transform 0.2s linear;\n            &:nth-child(1) {\n                top: 0;\n            }\n            &:nth-child(2) {\n                top: 8px;\n            }\n            &:nth-child(3) {\n                top: 16px;\n            }\n            body.js-mobile-menu-open & {\n                top: 8px;\n                transition: top 0.2s linear, opacity 0.1s 0.2s linear,\n                    transform 0.2s 0.2s linear;\n                &:nth-child(1) {\n                    transform: rotate(45deg);\n                }\n                &:nth-child(2) {\n                    opacity: 0;\n                }\n                &:nth-child(3) {\n                    transform: rotate(-45deg);\n                }\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/views/snippets/_header-mobile.scss","$_color: (\n    white: #ffffff,\n    black: #000000\n);\n\n\n\n// WEBPACK FOOTER //\n// ./src/styles/elements/_colours.scss"],"sourceRoot":""}